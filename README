This is the code for computing the twin-width of graphs using a SAT encoding.
The Branch & Bound solver can be found at https://github.com/ASchidler/tww-bb

The respective papers are:
- "A SAT approach to twin-width" ALENEX 2022 (https://epubs.siam.org/doi/abs/10.1137/1.9781611977042.6)
- "Computing Twin-width with SAT and Branch & Bound", IJCAI 2023 (https://www.ijcai.org/proceedings/2023/224)
- "https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.SAT.2022.15", SAT 2022 (https://drops.dagstuhl.de/entities/document/10.4230/LIPIcs.SAT.2022.15)

We used python 3.11.5, python-sat 1.8.dev13, networkx 2.8.8, and pynauty 2.8.6

The project can be run by using:
python runner.py <path-to-instance-in-dimacs-format>

If a solution is found, the solver outputs the width and then the contractions <contraction vertex> <contracted vertex>,
as in the PACE 2023 format.
Files that end with .cnf or .cnf.bz2 are treated as SAT files and the signed twin-width is computed.

The following parameters are accepted:
"-e <0-2>" chooses the encoding among relative, absolute, and absolute with cardinality trick.

"-v" enables verbose mode and gives more details.

"-m <value>" limits the memory the maximum memory usage to value GB, useful for testing.

"-d" draw the contraction sequence using dot/graphviz, requires dot in the path.

The following arguments enable specific improvements/symmetry breaking that can or cannot improve the runtime.
Which settings perform well is very instance dependent.

"-c" enables cubic mode, which reduces the number of clauses in the absolute (incremental) encoding.

"-t" enables contraction hints that give the solver information about contractions that will exceed the current bound.
"-f" enables full contraction hints (requires -t), which add even more information.
"-l value" adds a limit on the number of contractions the hints are used for (absolute encodings only). Since usually the hints are less useful in later contractions, this can boost performance.

"-o" enables order symmetry breaking (absolute encodings only).

***Branch & Bound Verification***
The SAT encoding can also be used to verify the result of the Branch & Bound solver.
The proof file can be generated by running it with "-r <proof file>".
The file can then be verified by running
python proof_checker.py <proof file> <graph file> <twin-width>

***Experiments***
The repository also contains code used in our experiments:
- experiments/runner_nauty.py computes the twin-width numbers, which are stored in nauto_limits.py. This requires nauty's (tested with 2.8.9) in bin/ or the path adjusted accordingly in the script. (ALENEX'22)
- experiments/random_graphs.py computes the twin-width for random graphs. (ALENEX'22)
- experiments/runner_named.py compute the twin-width of famous graphs. (ALENEX'22)
- sat_experiments/runner_cwd.py computes the signed clique-width for SAT instances. Required dcwd from https://bitbucket.org/mjhheule/cwd-encode/src/master/ in the bin directory.

